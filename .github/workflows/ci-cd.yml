name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: thoughtful-dubstep-hideout
  ECR_REPO: my-java-app
  IMAGE_TAG: ${{ github.sha }}
  APP_NAME: my-app
  NAMESPACE: default
  IAM_ROLE_ARN: arn:aws:iam::992382383822:role/github-actions-runner  # Move IAM Role to env

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Run Tests & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Run Tests
        run: mvn test

      - name: Build JAR
        run: mvn clean install -DskipTests

  build-and-push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382383822:role/EC2InstanceProfile
          aws-region: us-east-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .

      - name: Scan Image with Trivy
        run: |
          docker run --rm aquasec/trivy image --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

      - name: Deploy with Helm
        run: |
          helm upgrade --install $APP_NAME my-app/ \
            --namespace $NAMESPACE \
            --set image.repository=$ECR_REGISTRY/$ECR_REPO \
            --set image.tag=$IMAGE_TAG \
            --set replicaCount=2
 
  health-check:
    name: Health Check & Rollback
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check Deployment Health
        run: |
          STATUS=$(kubectl get deployment $APP_NAME -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
          if [[ "$STATUS" != "True" ]]; then
            echo "❌ Deployment is unhealthy. Rolling back..."
            helm rollback $APP_NAME -n $NAMESPACE
            exit 1
          fi
          echo "✅ Deployment is healthy."

  monitoring:
    name: Monitor Application Metrics
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify Prometheus Metrics
        run: |
          METRICS_URL="http://$(kubectl get svc prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')/metrics"
          echo "Checking Prometheus Metrics at $METRICS_URL"
          curl -s $METRICS_URL | grep -E "http_requests_total|memory_usage"

      - name: Verify Grafana Dashboard
        run: |
          GRAFANA_URL="http://$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Grafana Dashboard available at: $GRAFANA_URL"